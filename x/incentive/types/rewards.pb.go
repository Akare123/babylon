// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/incentive/rewards.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FinalityProviderRewards represents the cumulative rewards ratio of the
// finality provider per sat in that period.
// The period is ommited here and should be part of the key used to store this structure.
type FinalityProviderRewards struct {
	// The cumulative rewards of that finality provider at some specific period
	// This coins will aways increase the value, never be reduced due to keep acumulation
	// and when the cumulative rewards will be used to distribute rewards, 2 periods will
	// be interpolated and calculate the difference and multiplied by the total sat amount delegated
	// https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
	// This is also not considering slash of the rewards.
	CumulativeRewardsPerSat github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=CumulativeRewardsPerSat,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"CumulativeRewardsPerSat"`
}

func (m *FinalityProviderRewards) Reset()         { *m = FinalityProviderRewards{} }
func (m *FinalityProviderRewards) String() string { return proto.CompactTextString(m) }
func (*FinalityProviderRewards) ProtoMessage()    {}
func (*FinalityProviderRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5a587351117eb0, []int{0}
}
func (m *FinalityProviderRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinalityProviderRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinalityProviderRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinalityProviderRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalityProviderRewards.Merge(m, src)
}
func (m *FinalityProviderRewards) XXX_Size() int {
	return m.Size()
}
func (m *FinalityProviderRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalityProviderRewards.DiscardUnknown(m)
}

var xxx_messageInfo_FinalityProviderRewards proto.InternalMessageInfo

func (m *FinalityProviderRewards) GetCumulativeRewardsPerSat() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CumulativeRewardsPerSat
	}
	return nil
}

// BTCDelegationRewardsTracker represents the structure that holds information
// from the last time this BTC delegator withdraw the rewards from the finality provider
// The finality provider address is ommitted here but should be part of the key used
// to store this structure together with the BTC delegator address.
type BTCDelegationRewardsTracker struct {
	StartPeriodCumulativeRewardFP uint64 `protobuf:"varint,1,opt,name=StartPeriodCumulativeRewardFP,proto3" json:"StartPeriodCumulativeRewardFP,omitempty"`
	DelegationTotalActiveSat      uint64 `protobuf:"varint,2,opt,name=DelegationTotalActiveSat,proto3" json:"DelegationTotalActiveSat,omitempty"`
}

func (m *BTCDelegationRewardsTracker) Reset()         { *m = BTCDelegationRewardsTracker{} }
func (m *BTCDelegationRewardsTracker) String() string { return proto.CompactTextString(m) }
func (*BTCDelegationRewardsTracker) ProtoMessage()    {}
func (*BTCDelegationRewardsTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa5a587351117eb0, []int{1}
}
func (m *BTCDelegationRewardsTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BTCDelegationRewardsTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BTCDelegationRewardsTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BTCDelegationRewardsTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTCDelegationRewardsTracker.Merge(m, src)
}
func (m *BTCDelegationRewardsTracker) XXX_Size() int {
	return m.Size()
}
func (m *BTCDelegationRewardsTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_BTCDelegationRewardsTracker.DiscardUnknown(m)
}

var xxx_messageInfo_BTCDelegationRewardsTracker proto.InternalMessageInfo

func (m *BTCDelegationRewardsTracker) GetStartPeriodCumulativeRewardFP() uint64 {
	if m != nil {
		return m.StartPeriodCumulativeRewardFP
	}
	return 0
}

func (m *BTCDelegationRewardsTracker) GetDelegationTotalActiveSat() uint64 {
	if m != nil {
		return m.DelegationTotalActiveSat
	}
	return 0
}

func init() {
	proto.RegisterType((*FinalityProviderRewards)(nil), "babylon.incentive.FinalityProviderRewards")
	proto.RegisterType((*BTCDelegationRewardsTracker)(nil), "babylon.incentive.BTCDelegationRewardsTracker")
}

func init() { proto.RegisterFile("babylon/incentive/rewards.proto", fileDescriptor_fa5a587351117eb0) }

var fileDescriptor_fa5a587351117eb0 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0x02, 0x31,
	0x1c, 0xc6, 0xaf, 0x6a, 0x1c, 0xce, 0xc9, 0x8b, 0x09, 0x88, 0xb1, 0x10, 0x26, 0x16, 0x5a, 0x91,
	0xcd, 0x4d, 0x20, 0x6c, 0x26, 0x17, 0x60, 0x72, 0x6b, 0xef, 0x9a, 0xb3, 0xe1, 0xe8, 0x9f, 0xb4,
	0x05, 0xe5, 0x01, 0xdc, 0x7d, 0x03, 0xe3, 0xea, 0x93, 0x30, 0x32, 0x3a, 0xa9, 0x81, 0x17, 0x31,
	0x77, 0x57, 0x95, 0x98, 0xe0, 0x74, 0xd7, 0x7e, 0x5f, 0x7f, 0x5f, 0xff, 0xfd, 0xfc, 0x2a, 0x67,
	0x7c, 0x91, 0x82, 0xa2, 0x52, 0x45, 0x42, 0x59, 0x39, 0x17, 0x54, 0x8b, 0x7b, 0xa6, 0x63, 0x43,
	0xa6, 0x1a, 0x2c, 0x04, 0xc7, 0xce, 0x40, 0x7e, 0x0c, 0x95, 0x93, 0x04, 0x12, 0xc8, 0x55, 0x9a,
	0xfd, 0x15, 0xc6, 0x0a, 0x8e, 0xc0, 0x4c, 0xc0, 0x50, 0xce, 0x8c, 0xa0, 0xf3, 0x16, 0x17, 0x96,
	0xb5, 0x68, 0x04, 0x52, 0x15, 0x7a, 0xfd, 0x05, 0xf9, 0xa5, 0xbe, 0x54, 0x2c, 0x95, 0x76, 0x11,
	0x6a, 0x98, 0xcb, 0x58, 0xe8, 0x41, 0x11, 0x15, 0x3c, 0x22, 0xbf, 0xd4, 0x9d, 0x4d, 0x66, 0x29,
	0xcb, 0x02, 0xdc, 0x6e, 0x28, 0xf4, 0x90, 0xd9, 0x32, 0xaa, 0xed, 0x37, 0x8e, 0x2e, 0x4f, 0x49,
	0x81, 0x27, 0x19, 0x9e, 0x38, 0x3c, 0xe9, 0x82, 0x54, 0x9d, 0x8b, 0xe5, 0x7b, 0xd5, 0x7b, 0xfd,
	0xa8, 0x36, 0x12, 0x69, 0xef, 0x66, 0x9c, 0x44, 0x30, 0xa1, 0xee, 0x2e, 0xc5, 0xa7, 0x69, 0xe2,
	0x31, 0xb5, 0x8b, 0xa9, 0x30, 0xf9, 0x01, 0x33, 0xd8, 0x95, 0x55, 0x7f, 0x46, 0xfe, 0x59, 0x67,
	0xd4, 0xed, 0x89, 0x54, 0x24, 0xcc, 0x4a, 0x50, 0x4e, 0x1e, 0x69, 0x16, 0x8d, 0x85, 0x0e, 0x7a,
	0xfe, 0xf9, 0xd0, 0x32, 0x6d, 0x43, 0xa1, 0x25, 0xc4, 0x7f, 0x29, 0xfd, 0xb0, 0x8c, 0x6a, 0xa8,
	0x71, 0x30, 0xf8, 0xdf, 0x14, 0x5c, 0xf9, 0xe5, 0xdf, 0x84, 0x11, 0x58, 0x96, 0x5e, 0x47, 0x99,
	0x21, 0x9b, 0x76, 0x2f, 0x07, 0xec, 0xd4, 0x3b, 0x37, 0xcb, 0x35, 0x46, 0xab, 0x35, 0x46, 0x9f,
	0x6b, 0x8c, 0x9e, 0x36, 0xd8, 0x5b, 0x6d, 0xb0, 0xf7, 0xb6, 0xc1, 0xde, 0x6d, 0x7b, 0x6b, 0x7c,
	0xd7, 0x59, 0xca, 0xb8, 0x69, 0x4a, 0xf8, 0x5e, 0xd2, 0x87, 0xad, 0x96, 0xf3, 0xf7, 0xe0, 0x87,
	0x79, 0x37, 0xed, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0xc4, 0x0e, 0x11, 0x07, 0x02, 0x00,
	0x00,
}

func (m *FinalityProviderRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinalityProviderRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinalityProviderRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CumulativeRewardsPerSat) > 0 {
		for iNdEx := len(m.CumulativeRewardsPerSat) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardsPerSat[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRewards(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BTCDelegationRewardsTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BTCDelegationRewardsTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BTCDelegationRewardsTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DelegationTotalActiveSat != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.DelegationTotalActiveSat))
		i--
		dAtA[i] = 0x10
	}
	if m.StartPeriodCumulativeRewardFP != 0 {
		i = encodeVarintRewards(dAtA, i, uint64(m.StartPeriodCumulativeRewardFP))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRewards(dAtA []byte, offset int, v uint64) int {
	offset -= sovRewards(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FinalityProviderRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardsPerSat) > 0 {
		for _, e := range m.CumulativeRewardsPerSat {
			l = e.Size()
			n += 1 + l + sovRewards(uint64(l))
		}
	}
	return n
}

func (m *BTCDelegationRewardsTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartPeriodCumulativeRewardFP != 0 {
		n += 1 + sovRewards(uint64(m.StartPeriodCumulativeRewardFP))
	}
	if m.DelegationTotalActiveSat != 0 {
		n += 1 + sovRewards(uint64(m.DelegationTotalActiveSat))
	}
	return n
}

func sovRewards(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRewards(x uint64) (n int) {
	return sovRewards(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FinalityProviderRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinalityProviderRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinalityProviderRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardsPerSat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRewards
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRewards
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardsPerSat = append(m.CumulativeRewardsPerSat, types.Coin{})
			if err := m.CumulativeRewardsPerSat[len(m.CumulativeRewardsPerSat)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BTCDelegationRewardsTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BTCDelegationRewardsTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BTCDelegationRewardsTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPeriodCumulativeRewardFP", wireType)
			}
			m.StartPeriodCumulativeRewardFP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPeriodCumulativeRewardFP |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTotalActiveSat", wireType)
			}
			m.DelegationTotalActiveSat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTotalActiveSat |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRewards(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRewards
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRewards(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRewards
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRewards
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRewards
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRewards
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRewards
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRewards        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRewards          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRewards = fmt.Errorf("proto: unexpected end of group")
)
