// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: babylon/btcstkconsumer/v1/btcstkconsumer.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChainRegister is the registration information of a CZ
type ChainRegister struct {
	// chain_id is the ID of the chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// chain_name is the name of the chain
	ChainName string `protobuf:"bytes,2,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	// chain_description is a description for the chain (can be empty)
	ChainDescription string `protobuf:"bytes,3,opt,name=chain_description,json=chainDescription,proto3" json:"chain_description,omitempty"`
}

func (m *ChainRegister) Reset()         { *m = ChainRegister{} }
func (m *ChainRegister) String() string { return proto.CompactTextString(m) }
func (*ChainRegister) ProtoMessage()    {}
func (*ChainRegister) Descriptor() ([]byte, []int) {
	return fileDescriptor_de3ccd621fe1efd4, []int{0}
}
func (m *ChainRegister) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainRegister) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainRegister.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainRegister) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainRegister.Merge(m, src)
}
func (m *ChainRegister) XXX_Size() int {
	return m.Size()
}
func (m *ChainRegister) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainRegister.DiscardUnknown(m)
}

var xxx_messageInfo_ChainRegister proto.InternalMessageInfo

func (m *ChainRegister) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainRegister) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *ChainRegister) GetChainDescription() string {
	if m != nil {
		return m.ChainDescription
	}
	return ""
}

func init() {
	proto.RegisterType((*ChainRegister)(nil), "babylon.btcstkconsumer.v1.ChainRegister")
}

func init() {
	proto.RegisterFile("babylon/btcstkconsumer/v1/btcstkconsumer.proto", fileDescriptor_de3ccd621fe1efd4)
}

var fileDescriptor_de3ccd621fe1efd4 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4b, 0x4a, 0x4c, 0xaa,
	0xcc, 0xc9, 0xcf, 0xd3, 0x4f, 0x2a, 0x49, 0x2e, 0x2e, 0xc9, 0x4e, 0xce, 0xcf, 0x2b, 0x2e, 0xcd,
	0x4d, 0x2d, 0xd2, 0x2f, 0x33, 0x44, 0x13, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x84,
	0xaa, 0xd7, 0x43, 0x93, 0x2d, 0x33, 0x54, 0x2a, 0xe3, 0xe2, 0x75, 0xce, 0x48, 0xcc, 0xcc, 0x0b,
	0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x49, 0x2d, 0x12, 0x92, 0xe4, 0xe2, 0x48, 0x06, 0x09, 0xc4, 0x67,
	0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xb1, 0x83, 0xf9, 0x9e, 0x29, 0x42, 0xb2, 0x5c,
	0x5c, 0x10, 0xa9, 0xbc, 0xc4, 0xdc, 0x54, 0x09, 0x26, 0xb0, 0x24, 0x27, 0x58, 0xc4, 0x2f, 0x31,
	0x37, 0x55, 0x48, 0x9b, 0x4b, 0x10, 0x22, 0x9d, 0x92, 0x5a, 0x9c, 0x5c, 0x94, 0x59, 0x50, 0x92,
	0x99, 0x9f, 0x27, 0xc1, 0x0c, 0x56, 0x25, 0x00, 0x96, 0x70, 0x41, 0x88, 0x3b, 0x05, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x59, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92,
	0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xd4, 0xdd, 0x60, 0xdd, 0x30, 0x8e, 0x7e, 0x05, 0xba, 0xb7, 0x4b,
	0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x7e, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0xde, 0xbc, 0x51, 0x1d, 0x01, 0x00, 0x00,
}

func (m *ChainRegister) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainRegister) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainRegister) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainDescription) > 0 {
		i -= len(m.ChainDescription)
		copy(dAtA[i:], m.ChainDescription)
		i = encodeVarintBtcstkconsumer(dAtA, i, uint64(len(m.ChainDescription)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintBtcstkconsumer(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintBtcstkconsumer(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBtcstkconsumer(dAtA []byte, offset int, v uint64) int {
	offset -= sovBtcstkconsumer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainRegister) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovBtcstkconsumer(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovBtcstkconsumer(uint64(l))
	}
	l = len(m.ChainDescription)
	if l > 0 {
		n += 1 + l + sovBtcstkconsumer(uint64(l))
	}
	return n
}

func sovBtcstkconsumer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBtcstkconsumer(x uint64) (n int) {
	return sovBtcstkconsumer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainRegister) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBtcstkconsumer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainRegister: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainRegister: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstkconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstkconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBtcstkconsumer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBtcstkconsumer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBtcstkconsumer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBtcstkconsumer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBtcstkconsumer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcstkconsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBtcstkconsumer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBtcstkconsumer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBtcstkconsumer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBtcstkconsumer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBtcstkconsumer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBtcstkconsumer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBtcstkconsumer = fmt.Errorf("proto: unexpected end of group")
)
