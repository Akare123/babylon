syntax = "proto3";
package babylon.btcstkconsumer.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/crypto/secp256k1/keys.proto";
import "cosmos/staking/v1beta1/staking.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "babylon/btcstaking/v1/btcstaking.proto";
import "babylon/btcstaking/v1/pop.proto";
import "babylon/btcstkconsumer/v1/btcstkconsumer.proto";
import "babylon/btcstkconsumer/v1/params.proto";

option go_package = "github.com/babylonchain/babylon/x/btcstkconsumer/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/babylonchain/babylon/btcstkconsumer/v1/params";
  }
  // ChainRegistryList queries the list of chains that are registered to Babylon
  rpc ChainRegistryList(QueryChainRegistryListRequest) returns (QueryChainRegistryListResponse) {
    option (google.api.http).get = "/babylon/btcstkconsumer/v1/chain_registry_list";
  }
  // ChainsRegistry queries the latest info for a given list of chains in Babylon's view
  rpc ChainsRegistry(QueryChainsRegistryRequest) returns (QueryChainsRegistryResponse) {
    option (google.api.http).get = "/babylon/btcstkconsumer/v1/chains_registry";
  }

  // FinalityProviders queries all finality providers for a given chain
  rpc FinalityProviders(QueryFinalityProvidersRequest) returns (QueryFinalityProvidersResponse) {
    option (google.api.http).get = "/babylon/btcstkconsumer/v1/finality_providers";
  }

  // FinalityProvider info about one finality provider
  rpc FinalityProvider(QueryFinalityProviderRequest) returns (QueryFinalityProviderResponse) {
    option (google.api.http).get = "/babylon/btcstkconsumer/v1/finality_providers/{fp_btc_pk_hex}/finality_provider";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryChainRegistryListRequest is request type for the Query/ChainRegistryList RPC method
message QueryChainRegistryListRequest {
  // pagination defines whether to have the pagination in the request
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryChainRegistryListResponse is response type for the Query/ChainRegistryList RPC method
message QueryChainRegistryListResponse {
  // chain_ids are IDs of the chains in ascending alphabetical order
  repeated string chain_ids = 1;
  // pagination defines the pagination in the response
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryChainsRegistryRequest is request type for the Query/ChainsRegistry RPC method.
message QueryChainsRegistryRequest { repeated string chain_ids = 1; }

// QueryChainsRegistryResponse is response type for the Query/ChainsRegistry RPC method.
message QueryChainsRegistryResponse {
  repeated babylon.btcstkconsumer.v1.ChainRegister chains_register = 1;
}

// QueryFinalityProvidersRequest is the request type for the
// Query/FinalityProviders RPC method.
message QueryFinalityProvidersRequest {
  string chain_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryFinalityProvidersResponse is the response type for the
// Query/FinalityProviders RPC method.
message QueryFinalityProvidersResponse {
  // finality_providers contains all the finality providers
  repeated FinalityProviderResponse finality_providers = 1;

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFinalityProviderRequest requests information about a finality provider
message QueryFinalityProviderRequest {
  // chain id is the chain id this finality provider is registered to
  string chain_id = 1;
  // fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider
  string fp_btc_pk_hex = 2;
}

// QueryFinalityProviderResponse contains information about a finality provider
message QueryFinalityProviderResponse {
  // finality_provider contains the FinalityProvider
  FinalityProviderResponse finality_provider = 1;
}

// FinalityProviderResponse defines a finality provider with voting power information.
message FinalityProviderResponse {
  // description defines the description terms for the finality provider.
  cosmos.staking.v1beta1.Description description = 1;
  // commission defines the commission rate of the finality provider.
  string commission = 2 [
    (cosmos_proto.scalar)  = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec"
  ];
  // babylon_pk is the Babylon secp256k1 PK of this finality provider
  cosmos.crypto.secp256k1.PubKey babylon_pk = 3;
  // btc_pk is the Bitcoin secp256k1 PK of this finality provider
  // the PK follows encoding in BIP-340 spec
  bytes btc_pk = 4 [ (gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey" ];
  // pop is the proof of possession of babylon_pk and btc_pk
  btcstaking.v1.ProofOfPossession pop = 5;
  // slashed_babylon_height indicates the Babylon height when
  // the finality provider is slashed.
  // if it's 0 then the finality provider is not slashed
  uint64 slashed_babylon_height = 6;
  // slashed_btc_height indicates the BTC height when
  // the finality provider is slashed.
  // if it's 0 then the finality provider is not slashed
  uint64 slashed_btc_height = 7;
  // height is the queried Babylon height
  uint64 height = 8;
  // voting_power is the voting power of this finality provider at the given height
  uint64 voting_power = 9;
  // chain_id is the chain id this finality provider is registered to
  string chain_id = 10;
}
