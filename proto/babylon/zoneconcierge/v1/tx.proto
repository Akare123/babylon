syntax = "proto3";
package babylon.zoneconcierge.v1;


import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "babylon/zoneconcierge/v1/params.proto";

option go_package = "github.com/babylonchain/babylon/x/zoneconcierge/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams updates the zoneconcierge module parameters.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // RegisterChain registers a CZ chain to the zoneconcierge module.
  rpc RegisterChain(MsgRegisterChain) returns (MsgRegisterChainResponse);
}

// MsgUpdateParams defines a message for updating zoneconcierge module parameters.
message MsgUpdateParams {
    option (cosmos.msg.v1.signer) = "authority";
  
    // authority is the address of the governance account.
    // just FYI: cosmos.AddressString marks that this field should use type alias
    // for AddressString instead of string, but the functionality is not yet implemented
    // in cosmos-proto
    string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  
    // params defines the zoneconcierge parameters to update.
    //
    // NOTE: All parameters must be supplied.
    Params params = 2 [(gogoproto.nullable) = false];
}
  
// MsgUpdateParamsResponse is the response to the MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgRegisterChain defines a message for registering CZ chains to the zoneconcierge module.
message MsgRegisterChain {
  option (cosmos.msg.v1.signer) = "signer";

  string signer = 1;
  // chain_id is the ID of the chain
  string chain_id = 2;
  // chain_name is the name of the chain
  string chain_name = 3;
  // chain_description is a description for the chain (can be empty)
  string chain_description = 4;
}

// MsgRegisterChainResponse is the response to the MsgRegisterChain message.
message MsgRegisterChainResponse {}
